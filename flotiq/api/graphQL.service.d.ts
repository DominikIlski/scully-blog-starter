/**
 * Flotiq User API
 * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via <code>Try it out</code> button available next to each endpoint   * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.   It\'s also possible to use scoped API keys - you can create those in the API keys section of the Flotiq user interface. This will allow you to create a key that only authorizes access to a specific content type (or a set of content types, if you choose so). Read more about how to use and create API keys in the [API keys documentation](https://flotiq.com/docs/API/).   ## Object access   Once you define a Content Type it will become available in your Content API as a set of endpoints that will allow you to work with objects:   * create  * list  * update  * delete  * batch create  * retrieve single object.  ### Hydration   When you build Content Types that have relation to others your objects will optionally support hydration of related entities. The endpoints that support object retrieval accept a `hydrate` parameter, which can be used to easily fetch hydrated objects. Since this breaks the standard REST concepts - it\'s not enabled by default, but it\'s a very handy feature that allows to reduce the amount of HTTP requests sent over the wire and we strongly recommend to use it.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: hello@flotiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { InlineObject } from '../model/models';
import { Configuration } from '../configuration';
import * as ɵngcc0 from '@angular/core';
export declare class GraphQLService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Endpoint for GraphQL Queries for Headless Types
     * @param inlineObject
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    graphQL(inlineObject?: InlineObject, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<any>;
    graphQL(inlineObject?: InlineObject, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpResponse<any>>;
    graphQL(inlineObject?: InlineObject, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpEvent<any>>;
    /**
     * Get current descripion of GraphQL Schema
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    graphQLSchema(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<any>;
    graphQLSchema(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpResponse<any>>;
    graphQLSchema(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: undefined;
    }): Observable<HttpEvent<any>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GraphQLService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<GraphQLService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhRTC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImdyYXBoUUwuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0FBZUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRmxvdGlxIFVzZXIgQVBJXHJcbiAqICMjIEdldHRpbmcgc3RhcnRlZCAgIFRoaXMgaXMgeW91ciBGbG90aXEgVXNlciBBUEkgdGhhdCBhbGxvd3MgeW91IHRvIGFjY2VzcyB5b3VyIGRhdGEgdGhyb3VnaCB0aGUgQ29udGVudCBBUEkgdGhhdCB5b3UgZGVmaW5lZC4gICAjIyMgQWNjZXNzIHRvIGRhdGEgICBUaGVyZSBhcmUgc2V2ZXJhbCBtZXRob2RzIHRoYXQgeW91IGNhbiB1c2UgdG8gYWNjZXNzIHlvdXIgZGF0YTogICogTGl2ZSBBUEkgZG9jcyAtIGF2YWlsYWJsZSB2aWEgPGNvZGU+VHJ5IGl0IG91dDwvY29kZT4gYnV0dG9uIGF2YWlsYWJsZSBuZXh0IHRvIGVhY2ggZW5kcG9pbnQgICAqIENvcHlpbmcgZXhhbXBsZSBjb2RlIG9uIHRoZSByaWdodCBzaWRlIG9mIGVhY2ggZW5kcG9pbnQgICogQnkgZG93bmxvYWRpbmcgdGhlIFNES3MgYXZhaWxhYmxlIGluIG11bGl0cGxlIGxhbmd1YWdlcy4gICogQnkgZG93bmxvYWRpbmcgdGhlIFBvc3RtYW4gY29sbGVjdGlvbiBhbmQgaW1wb3J0aW5nIGl0IGludG8gUG9zdG1hbi4gICAgRWFjaCBvZiB0aGVzZSBtZXRob2RzIGlzIGRlc2NyaWJlZCBpbiBsZW5ndGggaW4gdGhlIFt1c2VyIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZmxvdGlxLmNvbS9kb2NzLykuICAgIyMjIEF1dGhvcml6YXRpb24gICBJbiBvcmRlciB0byBtYWtlIHVzZSBvZiB0aGUgcHJvdmlkZWQgZG9jdW1lbnRhdGlvbiwgZXhhbXBsZSBjb2RlLCBTREtzIGFuZCBzbyBvbiAtIHlvdSB3aWxsIG5lZWQgdG8gcHVsbCBvdXQgeW91ciBBUEkga2V5LiBXZSByZWNvbW1lbmQgdGhhdCB5b3Ugc3RhcnQgd2l0aCB0aGUgUmVhZE9ubHkgQVBJIEtleSB3aGljaCB3aWxsIGFsbG93IHlvdSB0byBtYWtlIGFsbCB0aGUgYEdFVGAgcmVxdWVzdHMgYnV0IHdpbGwgZXJyb3Itb3V0IHdoZW4geW91IHRyeSB0byBtb2RpZnkgY29udGVudC4gUGxlYXNlIHJlbWVtYmVyIHRvIHJlcGxhY2UgdGhlIGtleSBmb3IgYFBPU1RgLCBgUFVUYCBhbmQgYERFTEVURWAgY2FsbHMuICAgSXRcXCdzIGFsc28gcG9zc2libGUgdG8gdXNlIHNjb3BlZCBBUEkga2V5cyAtIHlvdSBjYW4gY3JlYXRlIHRob3NlIGluIHRoZSBBUEkga2V5cyBzZWN0aW9uIG9mIHRoZSBGbG90aXEgdXNlciBpbnRlcmZhY2UuIFRoaXMgd2lsbCBhbGxvdyB5b3UgdG8gY3JlYXRlIGEga2V5IHRoYXQgb25seSBhdXRob3JpemVzIGFjY2VzcyB0byBhIHNwZWNpZmljIGNvbnRlbnQgdHlwZSAob3IgYSBzZXQgb2YgY29udGVudCB0eXBlcywgaWYgeW91IGNob29zZSBzbykuIFJlYWQgbW9yZSBhYm91dCBob3cgdG8gdXNlIGFuZCBjcmVhdGUgQVBJIGtleXMgaW4gdGhlIFtBUEkga2V5cyBkb2N1bWVudGF0aW9uXShodHRwczovL2Zsb3RpcS5jb20vZG9jcy9BUEkvKS4gICAjIyBPYmplY3QgYWNjZXNzICAgT25jZSB5b3UgZGVmaW5lIGEgQ29udGVudCBUeXBlIGl0IHdpbGwgYmVjb21lIGF2YWlsYWJsZSBpbiB5b3VyIENvbnRlbnQgQVBJIGFzIGEgc2V0IG9mIGVuZHBvaW50cyB0aGF0IHdpbGwgYWxsb3cgeW91IHRvIHdvcmsgd2l0aCBvYmplY3RzOiAgICogY3JlYXRlICAqIGxpc3QgICogdXBkYXRlICAqIGRlbGV0ZSAgKiBiYXRjaCBjcmVhdGUgICogcmV0cmlldmUgc2luZ2xlIG9iamVjdC4gICMjIyBIeWRyYXRpb24gICBXaGVuIHlvdSBidWlsZCBDb250ZW50IFR5cGVzIHRoYXQgaGF2ZSByZWxhdGlvbiB0byBvdGhlcnMgeW91ciBvYmplY3RzIHdpbGwgb3B0aW9uYWxseSBzdXBwb3J0IGh5ZHJhdGlvbiBvZiByZWxhdGVkIGVudGl0aWVzLiBUaGUgZW5kcG9pbnRzIHRoYXQgc3VwcG9ydCBvYmplY3QgcmV0cmlldmFsIGFjY2VwdCBhIGBoeWRyYXRlYCBwYXJhbWV0ZXIsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGVhc2lseSBmZXRjaCBoeWRyYXRlZCBvYmplY3RzLiBTaW5jZSB0aGlzIGJyZWFrcyB0aGUgc3RhbmRhcmQgUkVTVCBjb25jZXB0cyAtIGl0XFwncyBub3QgZW5hYmxlZCBieSBkZWZhdWx0LCBidXQgaXRcXCdzIGEgdmVyeSBoYW5keSBmZWF0dXJlIHRoYXQgYWxsb3dzIHRvIHJlZHVjZSB0aGUgYW1vdW50IG9mIEhUVFAgcmVxdWVzdHMgc2VudCBvdmVyIHRoZSB3aXJlIGFuZCB3ZSBzdHJvbmdseSByZWNvbW1lbmQgdG8gdXNlIGl0LlxyXG4gKlxyXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgT3BlbkFQSSBkb2N1bWVudDogMi4wLjFcclxuICogQ29udGFjdDogaGVsbG9AZmxvdGlxLmNvbVxyXG4gKlxyXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yIChodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2gpLlxyXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcclxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxyXG4gKi9cclxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMsIEh0dHBSZXNwb25zZSwgSHR0cEV2ZW50LCBIdHRwUGFyYW1ldGVyQ29kZWMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSW5saW5lT2JqZWN0IH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcclxuaW1wb3J0IHsgQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uL2NvbmZpZ3VyYXRpb24nO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBHcmFwaFFMU2VydmljZSB7XHJcbiAgICBwcm90ZWN0ZWQgaHR0cENsaWVudDogSHR0cENsaWVudDtcclxuICAgIHByb3RlY3RlZCBiYXNlUGF0aDogc3RyaW5nO1xyXG4gICAgZGVmYXVsdEhlYWRlcnM6IEh0dHBIZWFkZXJzO1xyXG4gICAgY29uZmlndXJhdGlvbjogQ29uZmlndXJhdGlvbjtcclxuICAgIGVuY29kZXI6IEh0dHBQYXJhbWV0ZXJDb2RlYztcclxuICAgIGNvbnN0cnVjdG9yKGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsIGJhc2VQYXRoOiBzdHJpbmcsIGNvbmZpZ3VyYXRpb246IENvbmZpZ3VyYXRpb24pO1xyXG4gICAgcHJpdmF0ZSBhZGRUb0h0dHBQYXJhbXM7XHJcbiAgICBwcml2YXRlIGFkZFRvSHR0cFBhcmFtc1JlY3Vyc2l2ZTtcclxuICAgIC8qKlxyXG4gICAgICogRW5kcG9pbnQgZm9yIEdyYXBoUUwgUXVlcmllcyBmb3IgSGVhZGxlc3MgVHlwZXNcclxuICAgICAqIEBwYXJhbSBpbmxpbmVPYmplY3RcclxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXHJcbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXHJcbiAgICAgKi9cclxuICAgIGdyYXBoUUwoaW5saW5lT2JqZWN0PzogSW5saW5lT2JqZWN0LCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7XHJcbiAgICAgICAgaHR0cEhlYWRlckFjY2VwdD86IHVuZGVmaW5lZDtcclxuICAgIH0pOiBPYnNlcnZhYmxlPGFueT47XHJcbiAgICBncmFwaFFMKGlubGluZU9iamVjdD86IElubGluZU9iamVjdCwgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtcclxuICAgICAgICBodHRwSGVhZGVyQWNjZXB0PzogdW5kZWZpbmVkO1xyXG4gICAgfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPGFueT4+O1xyXG4gICAgZ3JhcGhRTChpbmxpbmVPYmplY3Q/OiBJbmxpbmVPYmplY3QsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge1xyXG4gICAgICAgIGh0dHBIZWFkZXJBY2NlcHQ/OiB1bmRlZmluZWQ7XHJcbiAgICB9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XHJcbiAgICAvKipcclxuICAgICAqIEdldCBjdXJyZW50IGRlc2NyaXBpb24gb2YgR3JhcGhRTCBTY2hlbWFcclxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXHJcbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXHJcbiAgICAgKi9cclxuICAgIGdyYXBoUUxTY2hlbWEob2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge1xyXG4gICAgICAgIGh0dHBIZWFkZXJBY2NlcHQ/OiB1bmRlZmluZWQ7XHJcbiAgICB9KTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgZ3JhcGhRTFNjaGVtYShvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge1xyXG4gICAgICAgIGh0dHBIZWFkZXJBY2NlcHQ/OiB1bmRlZmluZWQ7XHJcbiAgICB9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XHJcbiAgICBncmFwaFFMU2NoZW1hKG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge1xyXG4gICAgICAgIGh0dHBIZWFkZXJBY2NlcHQ/OiB1bmRlZmluZWQ7XHJcbiAgICB9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XHJcbn1cclxuIl19